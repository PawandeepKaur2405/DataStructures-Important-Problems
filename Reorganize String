Question Statement: 
Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.
Return any possible rearrangement of s or return "" if not possible.

Example 1:
Input: s = "aab"
Output: "aba"

Example 2:
Input: s = "aaab"
Output: ""

You can refer question here : https://leetcode.com/problems/reorganize-string/

## Solution : 

class Solution {
public:
    string reorganizeString(string s) {
        
        if(s.length() == 1)
            return s;
        
        vector<int> freq(26,0);
        for(int i=0 ; i<s.length() ; i++)
            freq[s[i]-'a']++;
        
        string ans="";
        
        priority_queue<pair<int,int>> pq;
        for(int i=0 ; i<freq.size() ; i++)
        {
            if(freq[i]!=0)
            {
                 pq.push(make_pair(freq[i],i));
            }
               
        }
        
        while(!pq.empty())
        {
            vector<pair<int,int>> temp;
            int cnt=0;
            
            if(pq.size()==1 && pq.top().first>1)
                break;
            
            while(!pq.empty())
            {
                pair<int,int> p = pq.top();
                if(cnt<2)
                {
                    ans += p.second+'a';
                    temp.push_back(make_pair(p.first-1,p.second));
                    
                }
                else   
                    temp.push_back(make_pair(p.first,p.second));
                cnt++;
                pq.pop();
            }
            
            for(int i=0 ; i<temp.size() ; i++)
            {
                pair<int,int> p = temp[i];
                if(p.first>0)
                    pq.push(make_pair(p.first,p.second));
            }
        }
        
        if(pq.empty())
            return ans;
        else
            return "";
        
    }
};
